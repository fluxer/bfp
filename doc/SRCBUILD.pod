=head1 NAME

SRCBUILD - Source Package Manager build recipe

=head1 DESCRIPTION

SRCBUILD is used as a script, a set of instructions, how to build software using
Source Package Manager. Its syntax is Shell (Bash), similar to those used by
Pacman's PKGBUILDs and Gentoo's ebuilds. Common things with the PKGBUILD format
are the version, release, description, depends, makedepends, optdepends,
checkdepends, source, options and backup variables. Common things with the
ebuild format is presence of pre/post actions in the SRCBUILD itself. This
means that everything is in one file, unlike the PKGBUILD format.

The metadata defined in the recipes should contain only one function
(src_install) and two (2) variables (version and description). Optionally three
(3) more functions can be specified (src_prepare, src_compile and src_check)
and nine (9) more variables (release, depends, makedepends, optdepends,
checkdepends, sources, pgpkeys, options and backup). Target name is defined by
the directory name in which the SRCBUILD is placed.

In addition six (6) more functions (pre/post_install, pre/post_upgrade and
pre/post_remove) can be defined as pre/post actions to be taken when software
is installed, upgraded or removed. Pre-actions are taken before the actual
install/upgrade/remove is done with post-actions after.

For easy of use SOURCE_DIR and INSTALL_DIR envirnonmental variables are
exported and can be used inside the SRCBUILD aside from those defined in the
SRCBUILD itself. SOURCE_DIR is the top-level directory where all sources
(tarballs, patches, etc.) are temporary placed. INSTALL_DIR is where the
software should be installed so that SPM can do its job of detecting runtime
dependencies and creating a compressed archive of the files.

=head1 OPTIONS

=head2 version

Variable defining version of software.

=head2 release

Variable defining release of build recipe.

=head2 description

Variable defining description of software.

=head2 depends

Variable defining runtime dependencies of software.

=head2 makedepends

Variable defining build dependencies of software. They are not added to the
metadata as runtime dependencies, unless detected as needed, and only
meaningfull when building.

=head2 optdepends

Variable defining optional build/runtime dependencies of software. If a
dependency from the array is installed a special envirnonmental variable is set
for src_prepare, src_compile, src_check and src_install which can be used to
build optional features of the software. If you are a Gentoo user - think of it
as a USE flag.

=head2 checkdepends

Variable defining check dependencies of software. They are being pulled only if
the software is going to be tested.

=head2 sources

Variable defining sources of software. This includes remote files, such as
tarballs or patches, that should be fetched. Note that local files can be
shipped along the SRCBUILD when needed.

=head2 pgpkeys

Variable defining PGP keys to be imported. They are usually required for
checking issuer of a software source tarball.

=head2 backup

Variable defining additional files to be backed up when merging software. Note
that all files with .conf extension are automatically backed up.

=head2 options

Variable defining options to be used when building software. It is used to
override the install options specified in the SPM configuration file. Note that
preceding an option with exclamation mark (!) has the opposite affect. Valid
options are:

=head3 verify

Fetch and verify PGP signatures

=head3 mirror

Use mirrors.

=head3 binaries

Strip binary files.

=head3 shared

Strip shared library files.

=head3 static

Strip static library files.

=head3 man

Compress manual page files.

=head3 purge

Purge unwanted files and directories.

=head3 missing

Ignore missing runtime dependencies.

=head3 rpath

Fix RPATH in binaries and libraries

=head3 debug

Split debug information from DWARF files.

=head2 src_prepare

Function defining the instructions to prepare the software. Patching and other
permenanet changes to the source code before compilation should be done via it.

=head2 src_compile

Function defining the instructions to compile the software. For projects using
autotools that is usually `./configure && make'.

=head2 src_check

Function defining the instructions to check (test) the software.

=head2 src_install

Function defining the instructions to install the software. For projects using
autotools that is usually `make install'. Note that the software should be
installed in the temporary directory INSTALL_DIR using DESTDIR or other method
depending on the software's build system.

=head2 pre_install

Function defining instructions what to do before installing the target.

=head2 post_install

Function defining instructions what to do after installing the target.

=head2 pre_upgrade

Function defining instructions what to do before upgrading the target.

=head2 post_upgrade

Function defining instructions what to do after upgrading the target.

=head2 pre_remove

Function defining instructions what to do before removing the target.

=head2 post_remove

Function defining instructions what to do after removing the target.

=head1 EXAMPLES

A prototype SRCBUILD should be installed in @DOCDIR@/bfp.

=head1 AUTHORS

Ivailo Monev (a.k.a. SmiL3y) <xakepa10@laimg.moc>

Copyright (c) 2013-2016 Ivailo Monev licensed through custom license, see the
COPYING file bundled with the source code.

=head1 SEE ALSO

spm(8) spm.conf(5) bash(1) gpg(1) objcopy(1) strip(1)
