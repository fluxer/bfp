#!/bin/sh

export PATH="/usr/sbin:/usr/bin:/sbin:/bin"

# set colors if supported
if [ -t 0 ];then
    C_BLACK='\e[1;30m'
    C_RED='\e[1;31m'
    C_GREEN='\e[1;32m'
    C_YELLOW='\e[1;33m'
    C_BLUE='\e[1;34m'
    C_PURPLE='\e[1;35m'
    C_CYAN='\e[1;36m'
    C_WHITE='\e[1;37m'
    C_CLEAR='\e[m'
fi

# usefull functions
msg() {
    echo -e " ${C_BLUE}*${C_CLEAR} ${@}"
}

warn() {
    echo -e " ${C_YELLOW}*${C_CLEAR} ${@}"
}

error() {
    echo -e " ${C_RED}*${C_CLEAR} ${@}"
}

rescue_shell() {
    msg "Running rescue Shell..."
    setsid cttyhack sh
}

cmd() {
    ${@}
    [ "$?" != "0" ] && rescue_shell
}

msg "Mounting pseudo filesystems..."
cmd mkdir -p /proc /sys /dev /run /newroot
cmd mount -t proc proc /proc -o nosuid,noexec,nodev
cmd mount -t sysfs sys /sys -o nosuid,noexec,nodev
cmd mount -t devtmpfs dev /dev -o mode=0755,nosuid

msg "Pre-loading keyboard module..."
modprobe -q atkbd

if [ ! -e "/etc/mtab" ];then
    msg "Creating mtab symlink..."
    cmd ln -s /proc/mounts /etc/mtab
fi

msg "Parsing cmdline options..."
# find will complain otherwise
mkdir -p /hooks
hooks="$(find /hooks ! -type d ! -name 'late_*' | sort)"
latehooks="$(find /hooks ! -type d -name 'late_*' | sort)"
init="/sbin/init"
root=""
state="ro"
lateshell="no"
for arg in $(cat /proc/cmdline);do
    case "$arg" in
        hooks=*) hooks="${arg#*=}"
                 # spaces in kernel arguments are not allowed
                 hooks="${hooks//,/ }" ;;
        latehooks=*) latehooks="${arg#*=}"
                 # spaces in kernel arguments are not allowed
                 latehooks="${latehooks//,/ }" ;;
        init=*) init="${arg#*=}" ;;
        root=*) root="${arg#*=}" ;;
        ro|rw) state="${arg}" ;;
        shell) rescue_shell ;;
        lateshell) lateshell="yes" ;;
    esac
done

case "$root" in
      /dev/*) device="$root" ;;
      UUID=*) device="/dev/disk/by-uuid/${root#*=}"  ;;
      LABEL=*) device="/dev/disk/by-label/${root#*=}" ;;
esac

msg "Setting up hotplugger..."
if [ -e "/proc/sys/kernel/hotplug" ];then
    cmd echo /bin/mdev > /proc/sys/kernel/hotplug
fi
cmd touch /dev/mdev.log
cmd mdev -s

msg "Loading modules..."
find /sys -name modalias -type f -exec sort -u {} + | xargs modprobe -qba

msg "Creating UUID/LABEL symlinks..."
blkid | while read line;do
    dev="${line%:*}"
    values="${line#*:}"
    eval "$values"
    if [ -n "$UUID" ];then
        cmd mkdir -p /dev/disk/by-uuid
        cmd ln -sf "$dev" "/dev/disk/by-uuid/$UUID"
    fi
    if [ -n "$LABEL" ];then
        cmd mkdir -p /dev/disk/by-label
        cmd ln -sf "$dev" "/dev/disk/by-label/$LABEL"
    fi
    unset UUID LABEL TYPE
done

for hook in $hooks;do
    base="$(basename "$hook")"
    if [ -f "/hooks/$base" ];then
        msg "Sourcing hook: $base"
        cmd . "/hooks/$base"
    else
        error "Missing hook: $base"
    fi
done

# device is optional, a hook may take care of the root (e.g. on Live CD)
if [ -e "$device" ];then
    msg "Checking the root device..."
    cmd fsck -M -T "$device"
    # compensate for Busybox not supporting mount options via fstab properly
    # TODO: send a bug report
    rootoptions=$(grep "$root" /etc/fstab | cut -f4)
    msg "Mounting the root filesystem..."
    cmd mount -o "$state,$rootoptions" "$device" /newroot
fi

if [ "$lateshell" = "yes" ];then
    rescue_shell
fi

for hook in $latehooks;do
    base="$(basename "$hook")"
    if [ -f "/hooks/$base" ];then
        msg "Sourcing late hook: $base"
        cmd . "/hooks/$base"
    else
        error "Missing late hook: $base"
    fi
done

# to make udev in userspace happy
if [ -e "/proc/sys/kernel/hotplug" ];then
    msg "Resetting hotplugger..."
    cmd echo > /proc/sys/kernel/hotplug
fi

# a hook could have mounted root
if [ -e "/newroot/$init" ] || [ -h "/newroot/$init" ];then
    msg "Moving pseudo-filesystems..."
    for p in /dev /proc /sys;do
        cmd mkdir -p "/newroot/$p"
        cmd mount --move "$p" "/newroot/$p"
    done

    msg "Switching root..."
    cmd exec switch_root /newroot "$init" "$@"
else
    msg "Root filesystem invalid..."
    rescue_shell
fi

warn "Rebooting system..."
sync; reboot -f
