#!/bin/bash

# NOTE: the script depends on beefy busybox. file and glibc. It will
# not work with musl/uclibc because they do not provide ldd script.

set -e

#========================== Helper functions ==========================#

# set colors if supported
if [ -t 0 ];then
    C_BLACK='\e[1;30m'
    C_RED='\e[1;31m'
    C_GREEN='\e[1;32m'
    C_YELLOW='\e[1;33m'
    C_BLUE='\e[1;34m'
    C_PURPLE='\e[1;35m'
    C_CYAN='\e[1;36m'
    C_WHITE='\e[1;37m'
    C_CLEAR='\e[m'
fi

# usefull functions
Msg() {
    echo -e " ${C_BLUE}*${C_CLEAR} ${@}"
}

Warn() {
    echo -e " ${C_YELLOW}*${C_CLEAR} ${@}"
}

Error() {
    echo -e " ${C_RED}*${C_CLEAR} ${@}"
    exit 1
}

CopyReal() {
    basedir="$("$BUSYBOX" dirname "$1")"
    "$BUSYBOX" mkdir -p "$TMPDIR/$basedir"
    "$BUSYBOX" cp -a "$1" "$TMPDIR/$basedir"
    if [ -h "$1" ];then
        realpath="$("$BUSYBOX" readlink -f "$1")"
        basedir="$("$BUSYBOX" dirname "$realpath")"
        "$BUSYBOX" mkdir -p "$TMPDIR/$basedir"
        "$BUSYBOX" cp -a "$realpath" "$TMPDIR/$basedir"
    fi
}

CopyDep() {
    CopyReal "$1"

    mime="$(file -bi "$1" | cut -d';' -f1)"
    if [ "$mime" == "application/x-executable" ] || [ "$mime" == "application/x-sharedlib" ];then
        for dep in $(ldd "$1" | cut -d' ' -f3);do
            if [ -z "$dep" ];then
                continue
            elif [ "$dep" == "not" ];then
                # not found
                Warn "A dependency is not found for: $1"
                continue
            fi

            CopyReal "$dep"
        done
    fi
}

TMPDIR=""
Cleanup() {
    if [ -n "$TMPDIR" ];then
        if [ -z "$NOCLEAN" ];then
            Msg "Removing temporary directory"
            rm -rf "$TMPDIR"
        else
            Msg "Temporary directory is: $TMPDIR"
        fi
    fi
}

trap Cleanup EXIT

#========================== Arguments handler ==========================#

Usage () {
echo "
 mkinitfs v1.0.0 - initial RAM filesystem image creator

  Usage: '# ${0##*/} <option> [<option>]..'

  Options:

     -k|--kernel=[VERSION|auto]   Kernel version to work with
     -b|--busybox=[PATH]          Path to Busybox (autodetected)
     -n|--noclean                 Do not remove the temporary files
     -h|--help                    Print this message
"
    exit 2
}

KERNEL="$(uname -r)"
BUSYBOX="$(type -p busybox)"
NOCLEAN=""

args_array=("$@")
for arg in "${args_array[@]}";do
    case "${arg}" in
        -k=*|--kernel=*) KERNEL="${arg#*=}";;
        -b=*|--busybox=*) BUSYBOX="${arg#*=}";;
        -n|--clean) NOCLEAN="yes" ;;
        -h|--help) Usage ;;
        -*) Warn "Unrecognized argument: ${arg}" ;;
    esac
done

if [ -z "$KERNEL" ];then
    Error "Kernel release is invalid: $KERNEL"
fi

if [ -z "$BUSYBOX" ] || [ ! -f "$BUSYBOX" ];then
    Error "Busybox is not found: $BUSYBOX"
fi

#============================ Image creator ============================#

MODULESDIR=""
IMAGE="/boot/initramfs-$KERNEL.img"

Msg "Searching for kernel modules directory"
for kdir in '/lib/modules' '/lib32/modules' '/lib64/modules' \
        '/usr/lib/modules' '/usr/lib32/modules' '/usr/lib64/modules';do
    if [ "$KERNEL" == "auto" ] && [ -d "$kdir" ];then
        autodeceted="$("$BUSYBOX" find "$kdir" -name 'modules.symbols' | "$BUSYBOX" sort | "$BUSYBOX" head -n1)"
        if [ -n "$autodeceted" ];then
            KERNEL="$("$BUSYBOX" basename $("$BUSYBOX" dirname "$autodeceted"))"
            MODULESDIR="$kdir/$KERNEL"
            IMAGE="/boot/initramfs-$KERNEL.img"
            break
        fi
    elif [ -d "$kdir/$KERNEL" ];then
        MODULESDIR="$kdir/$KERNEL"
        break
    fi
done

if [ "$KERNEL" == "auto" ];then
    Error "Kernel release could not be detected"
elif [ -z "$MODULESDIR" ];then
    Error "Kernel release is invalid: $KERNEL"
fi

TMPDIR="$(mktemp -d)"

Msg "Copying root overlay"
"$BUSYBOX" cp -a /etc/mkinitfs/root/* "$TMPDIR/"

Msg "Copying Busybox"
CopyDep "$BUSYBOX"

Msg "Installing Busybox applets"
"$BUSYBOX" --install -s "$TMPDIR/bin"

Msg "Copying additional files"
for conf in $("$BUSYBOX" find /etc/mkinitfs/files/ -maxdepth 1 -name '*.conf');do
    for line in $(cat "$conf");do
        if [ -z "$line" ];then
            contninue
        fi
        CopyDep "$line"
    done
done

Msg "Copying kernel modules"
basedir="$("$BUSYBOX" dirname "$MODULESDIR")"
"$BUSYBOX" mkdir -p "$TMPDIR/$basedir"
"$BUSYBOX" cp -a "$MODULESDIR" "$TMPDIR/$basedir"

Msg "Creating shared libraries cache"
"$BUSYBOX" mkdir -p "$TMPDIR/etc"
# to surpress a warning
"$BUSYBOX" touch "$TMPDIR/etc/ld.so.conf"
ldconfig -r "$TMPDIR"

Msg "Creating essential nodes"
"$BUSYBOX" mkdir -p "$TMPDIR/dev"
"$BUSYBOX" mknod -m 640 "$TMPDIR/dev/console" c 5 1
"$BUSYBOX" mknod -m 664 "$TMPDIR/dev/null" c 1 0

Msg "Creating image: $IMAGE"
(cd "$TMPDIR" && "$BUSYBOX" find . | "$BUSYBOX" cpio -o -H newc | "$BUSYBOX" gzip > "$IMAGE")
