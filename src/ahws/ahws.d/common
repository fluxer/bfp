#!/bin/sh

set -e

# enable Kernel Mode Setting (KMS)
kms_enable() {
    # FIXME: other bootloaders
    if [ -f /etc/default/grub ];then
        default="$(grep 'GRUB_CMDLINE_LINUX=' /etc/default/grub | sed 's|GRUB_CMDLINE_LINUX=||g')"
        if ! echo "$default" | grep -q nomdeset ;then
            sed -i "s|GRUB_CMDLINE_LINUX=.*|GRUB_CMDLINE_LINUX=$default nomodeset|g" /etc/default/grub
            grub-mkconfig -o /boot/grub/grub.cfg
        fi
    fi
}

# disable Kernel Mode Setting (KMS)
kms_disable() {
    # FIXME: other bootloaders
    if [ -f /etc/default/grub ];then
        default="$(grep 'GRUB_CMDLINE_LINUX=' /etc/default/grub | sed 's|GRUB_CMDLINE_LINUX=||g')"
        if echo "$default" | grep -q nomdeset ;then
            sed -i "s|GRUB_CMDLINE_LINUX=.*|GRUB_CMDLINE_LINUX=${default//nomodeset}|g" /etc/default/grub
            grub-mkconfig -o /boot/grub/grub.cfg
        fi
    fi
}

# force the X11 server to use the vesa driver
xvesa_enable() {
    mkdir -p /etc/X11/xorg.conf.d /etc/X11/xinit/xinitrc.d/
    echo 'Section "Device"
    Identifier             "Device0"
    Driver                 "vesa"
EndSection
' > /etc/X11/xorg.conf.d/10-vesa.conf
    echo -e '#!/bin/sh\nxrandr -s 0\n' > /etc/X11/xinit/xinitrc.d/10-vesa
    chmod +x /etc/X11/xinit/xinitrc.d/10-vesa
}

# unforce the X11 server to use the vesa driver
xvesa_disable() {
    rm -f /etc/X11/xorg.conf.d/10-vesa.conf /etc/X11/xinit/xinitrc.d/10-vesa
}

# install nVidia binary blob driver
install_nvidia() {
    # saves some computation
    if [ ! -d "/var/local/spm/nvidia" ] && spm-tools online;then
        spm binary -aDu nvidia
    # if the system is offline attempt to install from already fetched tarball
    elif [ ! -d "/var/local/spm/nvidia" ];then
        spm --offline=True binary -aDu nvidia
    fi
}

# uninstall nVidia binary blob driver
remove_nvidia() {
    if [ -d "/var/local/spm/nvidia" ];then
        # since the package partitially replaces xorg-server it gets detected
        # as runtime dependency instead of it, ignoring the reverse
        # dependencies because the original libglx.so and friends will be
        # restored from the post-remove action
        spm --ignore="$(spm local -pr nvidia)" binary -r nvidia
    fi
}

# install AMD binary blob driver
install_amd() {
    # saves some computation
    if [ ! -d "/var/local/spm/amd-catalyst" ] && spm-tools online;then
        spm binary -aDu amd-catalyst
    # if the system is offline attempt to install from already fetched tarball
    elif [ ! -d "/var/local/spm/amd-catalyst" ];then
        spm --offline=True binary -aDu amd-catalyst
    fi
}

# uninstall AMD binary blob driver
remove_amd() {
    if [ -d "/var/local/spm/amd-catalyst" ];then
        # since the package partitially replaces xorg-server it gets detected
        # as runtime dependency instead of it, ignoring the reverse
        # dependencies because the original libglx.so and friends will be
        # restored from the post-remove action
        spm --ignore="$(spm local -pr amd-catalyst)" binary -r amd-catalyst
    fi
}

install_package() {
    if [ ! -d "/var/local/spm/$1" ];then
        spm binary -a $@
    fi
}

remove_package() {
    if [ -d "/var/local/spm/$1" ];then
        spm binary -r $@
    fi
}

# enable a service
service_enable() {
    rc-update add "$1" default
}

# disable a service
service_disable() {
    rc-update del "$1" default
}

# start a service
service_start() {
    rc-service "$1" start
}

# stop a service
service_stop() {
    rc-service "$1" stop
}